{{
def is_alpine:
env.variant | index("alpine")
-}}
FROM php:{{ env.phpVersion }}-{{ env.variant }}

# persistent dependencies
{{ if is_alpine then ( -}}
RUN set -eux; \
    apk add --no-cache \
    # in theory, docker-entrypoint.sh is POSIX-compliant, but priority is a working, consistent image
    bash \
    # BusyBox sed is not sufficient for some of our sed expressions
    sed \
    ;
{{ ) else ( -}}
RUN set -eux; \
    apt-get update; \
    apt-get install -y --no-install-recommends \
    ; \
    rm -rf /var/lib/apt/lists/*
{{ ) end -}}

# install the PHP extensions we need (https://make.wordpress.org/hosting/handbook/handbook/server-environment/#php-extensions)
RUN set -ex; \
    \
    {{ if is_alpine then ( -}}
apk add --no-cache --virtual .build-deps \
    $PHPIZE_DEPS \
    freetype-dev \
    libjpeg-turbo-dev \
    libpng-dev \
    libzip-dev \
    ; \
    {{ ) else ( -}}
savedAptMark="$(apt-mark showmanual)"; \
    \
    apt-get update; \
    apt-get install -y --no-install-recommends \
    libfreetype6-dev \
    libjpeg-dev \
    libpng-dev \
    libzip-dev \
    ; \
    {{ ) end -}}
docker-php-ext-install -j "$(nproc)" \
    pdo pdo_mysql mysqli \
    zip \
    ; \
    {{ if is_alpine then ( -}}
runDeps="$( \
    scanelf --needed --nobanner --format '%n#p' --recursive /usr/local/lib/php/extensions \
    | tr ',' '\n' \
    | sort -u \
    | awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' \
    )"; \
    apk add --no-network --virtual .wordpress-phpexts-rundeps $runDeps; \
    apk del --no-network .build-deps
{{ ) else ( -}}
# reset apt-mark's "manual" list so that "purge --auto-remove" will remove all build dependencies
apt-mark auto '.*' > /dev/null; \
    apt-mark manual $savedAptMark; \
    ldd "$(php -r 'echo ini_get("extension_dir");')"/*.so \
    | awk '/=>/ { print $3 }' \
    | sort -u \
    | xargs -r dpkg-query -S \
    | cut -d: -f1 \
    | sort -u \
    | xargs -rt apt-mark manual; \
    \
    apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
    rm -rf /var/lib/apt/lists/*
{{ ) end -}}

# set recommended PHP.ini settings
# see https://secure.php.net/manual/en/opcache.installation.php
RUN set -eux; \
    docker-php-ext-enable opcache; \
    { \
    echo 'opcache.memory_consumption=128'; \
    echo 'opcache.interned_strings_buffer=8'; \
    echo 'opcache.max_accelerated_files=4000'; \
    echo 'opcache.revalidate_freq=2'; \
    echo 'opcache.fast_shutdown=1'; \
    } > /usr/local/etc/php/conf.d/opcache-recommended.ini

# https://wordpress.org/support/article/editing-wp-config-php/#configure-error-logging
RUN { \
    # https://www.php.net/manual/en/errorfunc.constants.php
    # https://github.com/docker-library/wordpress/issues/420#issuecomment-517839670
    echo 'error_reporting = E_ERROR | E_WARNING | E_PARSE | E_CORE_ERROR | E_CORE_WARNING | E_COMPILE_ERROR | E_COMPILE_WARNING | E_RECOVERABLE_ERROR'; \
    echo 'display_errors = Off'; \
    echo 'display_startup_errors = Off'; \
    echo 'log_errors = On'; \
    echo 'error_log = /dev/stderr'; \
    echo 'log_errors_max_len = 1024'; \
    echo 'ignore_repeated_errors = On'; \
    echo 'ignore_repeated_source = Off'; \
    echo 'html_errors = Off'; \
    } > /usr/local/etc/php/conf.d/error-logging.ini

{{ if env.variant == "apache" then ( -}}
RUN set -eux; \
    a2enmod rewrite expires; \
    \
    # https://httpd.apache.org/docs/2.4/mod/mod_remoteip.html
    a2enmod remoteip; \
    { \
    echo 'RemoteIPHeader X-Forwarded-For'; \
    # these IP ranges are reserved for "private" use and should thus *usually* be safe inside Docker
    echo 'RemoteIPTrustedProxy 10.0.0.0/8'; \
    echo 'RemoteIPTrustedProxy 172.16.0.0/12'; \
    echo 'RemoteIPTrustedProxy 192.168.0.0/16'; \
    echo 'RemoteIPTrustedProxy 169.254.0.0/16'; \
    echo 'RemoteIPTrustedProxy 127.0.0.0/8'; \
    } > /etc/apache2/conf-available/remoteip.conf; \
    a2enconf remoteip; \
    # https://github.com/docker-library/wordpress/issues/383#issuecomment-507886512
    # (replace all instances of "%h" with "%a" in LogFormat)
    find /etc/apache2 -type f -name '*.conf' -exec sed -ri 's/([[:space:]]*LogFormat[[:space:]]+"[^"]*)%h([^"]*")/\1%a\2/g' '{}' +; \
    sed -ri -e 's!/var/www/html!/var/www/phpcollab!g' /etc/apache2/sites-available/*.conf; \
    sed -ri -e 's!/var/www/!/var/www/phpcollab!g' /etc/apache2/apache2.conf /etc/apache2/conf-available/*.conf
{{ ) else "" end -}}

RUN set -eux; \
    version={{ .upstream | @sh }}; \
    sha1={{ .sha1 | @sh }}; \
    \
    curl -o phpcollab.tar.gz -fL "https://phpcollab.com/phpcollab-v$version.tar.gz"; \
    echo "$sha1 *phpcollab.tar.gz" | sha1sum -c -; \
    \
    # upstream tarballs include ./phpcollab/ so this gives us /var/www/phpcollab
    tar -xzf phpcollab.tar.gz -C /var/www/; \
    rm phpcollab.tar.gz; \
    sed -ri -e 's!"../!$this->appRoot . "/!g' /var/www/phpcollab/classes/Installation/Installation.php;\
    # https://wordpress.org/support/article/htaccess/
    # [ ! -e /var/www/phpcollab/.htaccess ]; \
    # { \
    # echo '# BEGIN phpcollab'; \
    # echo ''; \
    # echo 'RewriteEngine On'; \
    # echo 'RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]'; \
    # echo 'RewriteBase /'; \
    # echo 'RewriteRule ^index\.php$ - [L]'; \
    # echo 'RewriteCond %{REQUEST_FILENAME} !-f'; \
    # echo 'RewriteCond %{REQUEST_FILENAME} !-d'; \
    # echo 'RewriteRule . /index.php [L]'; \
    # echo ''; \
    # echo '# END phpcollab'; \
    # } > /var/www/phpcollab/.htaccess; \
    \
    chown -R www-data:www-data /var/www/phpcollab; \
    # pre-create wp-content (and single-level children) for folks who want to bind-mount themes, etc so permissions are pre-created properly instead of root:root
    # wp-content/cache: https://github.com/docker-library/wordpress/issues/534#issuecomment-705733507
    mkdir wp-content; \
    for dir in /var/www/phpcollab/wp-content/*/ cache; do \
    dir="$(basename "${dir%/}")"; \
    mkdir "wp-content/$dir"; \
    done; \
    chown -R www-data:www-data wp-content; \
    chmod -R 777 wp-content

COPY docker-entrypoint.sh /usr/local/bin/

VOLUME /var/www/phpcollab
WORKDIR /var/www/phpcollab
ENTRYPOINT ["docker-entrypoint.sh"]
CMD {{ [ if env.variant == "apache" then "apache2-foreground" else "php-fpm" end ] | @json }}
